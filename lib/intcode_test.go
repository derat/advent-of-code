// Copyright 2022 Daniel Erat.
// All rights reserved.

package lib

import (
	"strconv"
	"strings"
	"testing"
)

func TestIntcode_Basic(t *testing.T) {
	for _, tc := range []struct {
		prog, mem string // orig program and final mem state
		in, out   string // input and output values
	}{
		// 2019/02 examples:
		{"1,9,10,3,2,3,11,0,99,30,40,50", "3500,9,10,70,2,3,11,0,99,30,40,50", "", ""},
		{"1,0,0,0,99", "2,0,0,0,99", "", ""},
		{"2,3,0,3,99", "2,3,0,6,99", "", ""},
		{"2,4,4,5,99,0", "2,4,4,5,99,9801", "", ""},
		{"1,1,1,4,99,5,6,0,99", "30,1,1,4,2,5,6,0,99", "", ""},

		// 2019/05 examples:
		{"3,0,99", "40,0,99", "40", ""},                 // output
		{"4,2,99", "4,2,99", "", "99"},                  // input
		{"1002,4,3,4,33", "1002,4,3,4,99", "", ""},      // multiply pos/immed
		{"1101,100,-1,4,0", "1101,100,-1,4,99", "", ""}, // negative
		// Jump test: output 1 if input is 8 and 0 otherwise (positional).
		{"3,9,8,9,10,9,4,9,99,-1,8", "", "7", "0"},
		{"3,9,8,9,10,9,4,9,99,-1,8", "", "8", "1"},
		{"3,9,8,9,10,9,4,9,99,-1,8", "", "9", "0"},
		// Jump test: output 1 if input less than 8 and 0 otherwise (positional).
		{"3,9,7,9,10,9,4,9,99,-1,8", "", "7", "1"},
		{"3,9,7,9,10,9,4,9,99,-1,8", "", "8", "0"},
		{"3,9,7,9,10,9,4,9,99,-1,8", "", "9", "0"},
		// Jump test: output 1 if input is 8 and 0 otherwise (immediate).
		{"3,3,1108,-1,8,3,4,3,99", "", "7", "0"},
		{"3,3,1108,-1,8,3,4,3,99", "", "8", "1"},
		{"3,3,1108,-1,8,3,4,3,99", "", "9", "0"},
		// Jump test: output 1 if input less than 8 and 0 otherwise (immediate).
		{"3,3,1107,-1,8,3,4,3,99", "", "7", "1"},
		{"3,3,1107,-1,8,3,4,3,99", "", "8", "0"},
		{"3,3,1107,-1,8,3,4,3,99", "", "9", "0"},
		// "... uses an input instruction to ask for a single number. The program will then output
		// 999 if the input value is below 8, output 1000 if the input value is equal to 8, or
		// output 1001 if the input value is greater than 8."
		{`3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,` +
			`1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,` +
			`999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99`, "", "7", "999"},
		{`3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,` +
			`1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,` +
			`999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99`, "", "8", "1000"},
		{`3,21,1008,21,8,20,1005,20,22,107,8,21,20,1006,20,31,` +
			`1106,0,36,98,0,0,1002,21,125,20,4,20,1105,1,46,104,` +
			`999,1105,1,46,1101,1000,1,20,4,20,1105,1,46,98,99`, "", "9", "1001"},

		// 2019/09 examples:
		{"109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99", "", "",
			"109,1,204,-1,1001,100,1,100,1008,100,16,101,1006,101,0,99"}, // quine
		{"1102,34915192,34915192,7,4,7,99,0", "", "", "1219070632396864"}, // large mult
		{"104,1125899906842624,99", "", "", "1125899906842624"},           // output large number

		// 2019/09 input (BOOST -- Basic Operation Of System Test):
		{"1102,34463338,34463338,63,1007,63,34463338,63,1005,63,53,1102,1,3,1000,109," +
			"988,209,12,9,1000,209,6,209,3,203,0,1008,1000,1,63,1005,63,65,1008,1000," +
			"2,63,1005,63,904,1008,1000,0,63,1005,63,58,4,25,104,0,99,4,0,104,0,99," +
			"4,17,104,0,99,0,0,1101,0,641,1026,1101,0,24,1014,1101,30,0,1015,1101,0," +
			"0,1020,1101,35,0,1000,1101,0,708,1029,1101,0,27,1009,1102,38,1,1007,1102," +
			"638,1,1027,1101,1,0,1021,1102,32,1,1003,1101,0,34,1012,1102,20,1,1017," +
			"1102,1,37,1010,1101,0,713,1028,1101,33,0,1019,1102,1,36,1001,1102,22,1," +
			"1005,1101,23,0,1018,1101,21,0,1016,1102,28,1,1006,1101,0,26,1011,1102,1," +
			"215,1022,1102,1,29,1013,1102,25,1,1004,1102,1,31,1008,1102,1,292,1025," +
			"1102,297,1,1024,1101,208,0,1023,1102,1,39,1002,109,12,1206,9,197,1001,64," +
			"1,64,1106,0,199,4,187,1002,64,2,64,109,11,2105,1,0,1001,64,1,64,1105,1," +
			"217,4,205,1002,64,2,64,109,2,21107,40,41,-9,1005,1016,235,4,223,1105,1," +
			"239,1001,64,1,64,1002,64,2,64,109,-28,1207,3,36,63,1005,63,261,4,245," +
			"1001,64,1,64,1105,1,261,1002,64,2,64,109,5,1207,1,31,63,1005,63,281," +
			"1001,64,1,64,1105,1,283,4,267,1002,64,2,64,109,22,2105,1,0,4,289,1105," +
			"1,301,1001,64,1,64,1002,64,2,64,109,-16,1201,0,0,63,1008,63,31,63,1005," +
			"63,323,4,307,1106,0,327,1001,64,1,64,1002,64,2,64,109,18,1205,-5,345,4," +
			"333,1001,64,1,64,1105,1,345,1002,64,2,64,109,-21,2101,0,-2,63,1008,63," +
			"32,63,1005,63,367,4,351,1106,0,371,1001,64,1,64,1002,64,2,64,109,6," +
			"21102,41,1,7,1008,1018,38,63,1005,63,395,1001,64,1,64,1105,1,397,4,377," +
			"1002,64,2,64,109,-1,21107,42,41,2,1005,1012,413,1106,0,419,4,403,1001,64," +
			"1,64,1002,64,2,64,109,-10,2107,36,0,63,1005,63,435,1106,0,441,4,425," +
			"1001,64,1,64,1002,64,2,64,109,9,21108,43,44,9,1005,1018,461,1001,64,1," +
			"64,1105,1,463,4,447,1002,64,2,64,109,-10,2102,1,8,63,1008,63,39,63,1005," +
			"63,483,1105,1,489,4,469,1001,64,1,64,1002,64,2,64,109,21,21108,44,44,-1," +
			"1005,1019,511,4,495,1001,64,1,64,1106,0,511,1002,64,2,64,109,-18,1208,1," +
			"32,63,1005,63,533,4,517,1001,64,1,64,1105,1,533,1002,64,2,64,109,5,2101," +
			"0,-5,63,1008,63,37,63,1005,63,557,1001,64,1,64,1105,1,559,4,539,1002,64," +
			"2,64,109,8,1208,-8,35,63,1005,63,575,1105,1,581,4,565,1001,64,1,64,1002," +
			"64,2,64,109,-5,1202,-3,1,63,1008,63,38,63,1005,63,607,4,587,1001,64,1," +
			"64,1106,0,607,1002,64,2,64,109,-17,2107,31,10,63,1005,63,629,4,613,1001," +
			"64,1,64,1106,0,629,1002,64,2,64,109,31,2106,0,3,1105,1,647,4,635,1001," +
			"64,1,64,1002,64,2,64,109,-7,1201,-9,0,63,1008,63,32,63,1005,63,667,1106," +
			"0,673,4,653,1001,64,1,64,1002,64,2,64,109,-5,1202,-5,1,63,1008,63,41," +
			"63,1005,63,693,1105,1,699,4,679,1001,64,1,64,1002,64,2,64,109,16,2106,0," +
			"0,4,705,1105,1,717,1001,64,1,64,1002,64,2,64,109,-6,1205,-2,729,1105,1," +
			"735,4,723,1001,64,1,64,1002,64,2,64,109,-18,2102,1,1,63,1008,63,22,63," +
			"1005,63,761,4,741,1001,64,1,64,1105,1,761,1002,64,2,64,109,-2,2108,32,1," +
			"63,1005,63,783,4,767,1001,64,1,64,1105,1,783,1002,64,2,64,109,13,21102," +
			"45,1,-2,1008,1013,45,63,1005,63,809,4,789,1001,64,1,64,1105,1,809,1002," +
			"64,2,64,109,-13,2108,24,3,63,1005,63,829,1001,64,1,64,1106,0,831,4,815," +
			"1002,64,2,64,109,13,21101,46,0,-3,1008,1012,43,63,1005,63,851,1106,0,857," +
			"4,837,1001,64,1,64,1002,64,2,64,109,14,1206,-9,875,4,863,1001,64,1,64," +
			"1106,0,875,1002,64,2,64,109,-3,21101,47,0,-7,1008,1019,47,63,1005,63,901," +
			"4,881,1001,64,1,64,1105,1,901,4,64,99,21101,27,0,1,21101,0,915,0,1106," +
			"0,922,21201,1,66926,1,204,1,99,109,3,1207,-2,3,63,1005,63,964,21201,-2," +
			"-1,1,21102,942,1,0,1105,1,922,21202,1,1,-1,21201,-2,-3,1,21101,957,0,0," +
			"1106,0,922,22201,1,-1,-2,1106,0,968,22102,1,-2,-2,109,-3,2106,0,0",
			"", "1", "4006117640"},
	} {
		prog := ExtractInt64s(tc.prog)
		vm := NewIntcode(prog)
		vm.Start()
		if tc.in != "" {
			for _, v := range ExtractInt64s(tc.in) {
				vm.In <- v
			}
		}
		var out []string
		for v := range vm.Out {
			out = append(out, strconv.FormatInt(v, 10))
		}
		if !vm.Wait() {
			t.Errorf("%q with input %q failed", tc.prog, tc.in)
			continue
		}

		if tc.mem != "" {
			mem := make([]string, len(prog))
			for i := range mem {
				mem[i] = strconv.FormatInt(vm.Mem[int64(i)], 10)
			}
			if got := strings.Join(mem, ","); got != tc.mem {
				t.Errorf("%q with input %q produced %q; want %q", tc.prog, tc.in, got, tc.mem)
			}
		}
		if got := strings.Join(out, ","); got != tc.out {
			t.Errorf("%q with input %q output %q; want %q", tc.prog, tc.in, got, tc.out)
		}
	}
}

func TestIntcode_Parallel(t *testing.T) {
	for _, tc := range []struct {
		prog, ins string
		feedback  bool
		want      int64
	}{
		// 2019/07 examples:
		{"3,15,3,16,1002,16,10,16,1,16,15,15,4,15,99,0,0", "4,3,2,1,0", false, 43210},
		{`3,23,3,24,1002,24,10,24,1002,23,-1,23,` +
			`101,5,23,23,1,24,23,23,4,23,99,0,0`, "0,1,2,3,4", false, 54321},
		{`3,31,3,32,1002,32,10,32,1001,31,-2,31,1007,31,0,33,` +
			`1002,33,7,33,1,33,31,31,1,32,31,31,4,31,99,0,0,0`, "1,0,4,3,2", false, 65210},
		{`3,26,1001,26,-4,26,3,27,1002,27,2,27,1,27,26,` +
			`27,4,27,1001,28,-1,28,1005,28,6,99,0,0,5`, "9,8,7,6,5", true, 139629729},
		{`3,52,1001,52,-5,52,3,53,1,52,56,54,1007,54,5,55,1005,55,26,1001,54,` +
			`-5,54,1105,1,12,1,53,54,53,1008,54,0,55,1001,55,1,55,2,53,55,53,4,` +
			`53,1001,56,-1,56,1005,56,6,99,0,0,0,0,10`, "9,7,8,5,6", true, 18216},
	} {
		// Create the VMs and wire them together.
		prog := ExtractInt64s(tc.prog)
		ins := ExtractInt64s(tc.ins)
		vms := make([]*Intcode, len(ins))
		for i := range ins {
			vms[i] = NewIntcode(prog)
			if i > 0 {
				vms[i].In = vms[i-1].Out
			}
		}
		if tc.feedback {
			vms[0].In = vms[len(vms)-1].Out
		}

		// Start the VMs and feed them their inputs.
		for i, vm := range vms {
			vm.Start()
			vm.In <- ins[i]
		}

		// Send the input signal to the first and read the output from the last.
		vms[0].In <- 0
		if !vms[0].Wait() {
			t.Errorf("%q with inputs %q failed", tc.prog, tc.ins)
		} else if got := <-vms[len(vms)-1].Out; got != tc.want {
			t.Errorf("%q with inputs %q produced %v; want %v", tc.prog, tc.ins, got, tc.want)
		}
	}
}
